Part 1

Question 1:

	*Here we get a SIGSEGV error from both of the debugging tools, and we get more spesific error message in valgrind which says it cannot map to  the adress NULL

Gnu output:
Program received signal SIGSEGV, Segmentation fault.
0x000055555555513d in main () at oppgave1.c:5
5	int b = *a;

Valgrind output:
==2822== Invalid read of size 4
==2822==    at 0x10913D: main (oppgave1.c:5)
==2822==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2822== 
==2822== 
==2822== Process terminating with default action of signal 11 (SIGSEGV)
==2822==  Access not within mapped region at address 0x0
==2822==    at 0x10913D: main (oppgave1.c:5)
==2822==  If you believe this happened as a result of a stack
==2822==  overflow in your program's main thread (unlikely but
==2822==  possible), you can try to increase the size of the
==2822==  main thread stack using the --main-stacksize= flag.
==2822==  The main thread stack size used in this run was 8388608.
==2822== 
==2822== HEAP SUMMARY:
==2822==     in use at exit: 0 bytes in 0 blocks
==2822==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==2822== 
==2822== All heap blocks were freed -- no leaks are possible
==2822== 
==2822== For lists of detected and suppressed errors, rerun with: -s
==2822== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)

Question 2:

	* Nothing seems to be happening when the program is run, and we dont get a error message from the gdb eather. However when we use valgrind we can see that there is a memory leak of 400 bytes.

valgrind output:
==2950== HEAP SUMMARY:
==2950==     in use at exit: 400 bytes in 1 blocks
==2950==   total heap usage: 1 allocs, 0 frees, 400 bytes allocated
==2950== 
==2950== LEAK SUMMARY:
==2950==    definitely lost: 0 bytes in 0 blocks
==2950==    indirectly lost: 0 bytes in 0 blocks
==2950==      possibly lost: 0 bytes in 0 blocks
==2950==    still reachable: 400 bytes in 1 blocks
==2950==         suppressed: 0 bytes in 0 blocks
==2950== Reachable blocks (those to which a pointer was found) are not shown.
==2950== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==2950== 
==2950== For lists of detected and suppressed errors, rerun with: -s
==2950== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Question 3:

	*Nothing seems to be happening when we run this program, and gdb dosent catch any error here. But Valgrind pick up the error. What seems to be the problem is that the adress is 0 bytes but is supposed to be 400 bytes.

Gnu output:
[Inferior 1 (process 3076) exited normally]

Valgrind output:
==3082== Invalid write of size 4
==3082==    at 0x10916D: main (oppgave3.c:5)
==3082==  Address 0x4a501d0 is 0 bytes after a block of size 400 alloc'd
==3082==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==3082==    by 0x10915E: main (oppgave3.c:4)
==3082== 
==3082== 
==3082== HEAP SUMMARY:
==3082==     in use at exit: 400 bytes in 1 blocks
==3082==   total heap usage: 1 allocs, 0 frees, 400 bytes allocated
==3082== 
==3082== 400 bytes in 1 blocks are definitely lost in loss record 1 of 1
==3082==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind-vgpreload_memcheck-amd64-linux.so)
==3082==    by 0x10915E: main (oppgave3.c:4)
==3082== 
==3082== LEAK SUMMARY:
==3082==    definitely lost: 400 bytes in 1 blocks
==3082==    indirectly lost: 0 bytes in 0 blocks
==3082==      possibly lost: 0 bytes in 0 blocks
==3082==    still reachable: 0 bytes in 0 blocks
==3082==         suppressed: 0 bytes in 0 blocks
==3082== 
==3082== For lists of detected and suppressed errors, rerun with: -s
==3082== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Question 4:

	* Valgrind tells us that theese bytes we are looking at are free

Valgrind output:
==3143== Invalid read of size 4
==3143==    at 0x1091B3: main (oppgave4.c:6)
==3143==  Address 0x4a50040 is 0 bytes inside a block of size 400 free'd
==3143==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==3143==    by 0x1091AE: main (oppgave4.c:5)
==3143==  Block was alloc'd at
==3143==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==3143==    by 0x10919E: main (oppgave4.c:4)
==3143== 
0
==3143== 
==3143== HEAP SUMMARY:
==3143==     in use at exit: 0 bytes in 0 blocks
==3143==   total heap usage: 2 allocs, 2 frees, 1,424 bytes allocated
==3143== 
==3143== All heap blocks were freed -- no leaks are possible
==3143== 
==3143== For lists of detected and suppressed errors, rerun with: -s
==3143== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Question 5:

	* We dont need debugging tools for this question. When we run the program we can see that we are freeing an invalid pointer. and the whole operation is aborted.

Program output:
./oppgave5
free(): invalid pointer
Aborted (core dumped)

Part 2

Question 1:
	* The numbers in the user time column tells us how much time is spent running non-kernal code.
	* When running another (mem 1) it seemed to increase the value of user time with about 25.
	* When canhing the number of allocated processors to the virtual machine it affects the user time. So for instance if you doubble your amount of processes it would cut the user time in half.
	
Output from vmstat terminal:

procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0  19576 1325532  36456 1119300    1    5    66    50  161  263  3  1 97  0  0
 0  0  19576 1325532  36456 1119300    0    0     0     0  589  989  1  1 98  0  0
 1  0  19576 1325444  36456 1119312    0    0     0     0 1434 2247 17  2 81  0  0
 0  0  19576 1325444  36456 1119424    0    0     0     0 1071 2016  3  1 97  0  0
 2  0  19576 1325060  36456 1119424    0    0     0     0  700 1200  4  1 96  0  0
 1  0  19576 1325060  36456 1119424    0    0     0     0  710  791 24  1 75  0  0
 1  0  19576 1325296  36464 1119520    0    0     0    40  887 1168 25  1 74  1  0
 2  0  19576 1325312  36464 1119520    0    0     0     0  761  980 22  1 77  0  0
 2  0  19576 1324044  36464 1119520    0    0     0     0  524  432 28  0 72  0  0
 3  0  19576 1324044  36464 1119520    0    0     0     0  889  381 50  0 49  0  0
 3  0  19576 1324296  36464 1119520    0    0     0     0 1187 1312 52  1 47  0  0
 3  0  19576 1324296  36464 1119520    0    0     0     0 1060  948 54  1 45  0  0
 2  0  19576 1325052  36464 1119352    0    0     0     0 1754 2516 59  1 40  0  0

Question 2:

	* Yes, the value of the free column changes as expected when both closing and starting the program (mem 1024). It changed with approximately 1024MB (128 000KB)
	
Output from vmstat console:

procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0  19576 1329996  36596 1121444    1    5    64    49  162  264  3  1 97  0  0
 1  0  19576 1330108  36596 1121444    0    0     0     0  720 1251  2  1 98  0  0
 0  0  19576 1330108  36596 1121468    0    0     0     0 1688 2741 16  2 82  0  0
 0  0  19576 1330108  36596 1121468    0    0     0    64  218  371  1  0 99  0  0
 1  0  19576 279764  36596 1121468    0    0     0     0  596  716  9 10 81  0  0
 1  0  19576 279764  36596 1121468    0    0     0     0  469  348 25  0 75  0  0
 1  0  19576 279764  36596 1121468    0    0     0     0  529  472 26  0 74  0  0
 1  0  19576 279764  36596 1121468    0    0     0     0  536  504 25  0 75  0  0
 1  0  19576 279764  36596 1121468    0    0     0     0  462  359 25  0 75  0  0
 1  0  19576 279764  36596 1121468    0    0     0    36  608  653 26  0 74  0  0
 2  0  19576 1329352  36596 1121468    0    0     0     0  424  707  5  2 93  0  0
 0  0  19576 1329352  36596 1121468    0    0     0     0  990 1705  2  3 96  0  0
 2  0  19576 1329132  36596 1121468    0    0     0     0 1409 2194 16  1 83  0  0

Question 3:

	* When I run (mem 2800) nothing happens to the si, whitch is memory swaped in from the disk.However it seems like ca. 200MB where swapped from memory to disk, and 200MB was exactly how much above the free memory I selected the mem to be run at. ./mem 2800 and i had 2600 free.
	
free -h:
              total        used        free      shared  buff/cache   available
Mem:          3,8Gi       1,1Gi       2,6Gi        57Mi       198Mi       2,5Gi
Swap:         448Mi       437Mi        10Mi

Output from vmstat console:

procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0 436720 2659316   5060 233508    2   18    70    60  161  263  3  1 97  0  0
 0  0 436720 2659308   5060 233508    0    0     0     0  727 1271  1  1 99  0  0
 0  0 436700 2659308   5060 233532   12    0    12     0 1644 2528 18  1 81  0  0
 0  0 436700 2659308   5060 233532    0    0     0     0  277  450  0  1 99  0  0
 0  0 436700 2659308   5060 233532    0    0     0     0  259  410  0  0 100  0  0
 0  0 436700 2657944   5060 235080    0    0   928     0  414  664  1  2 97  1  0
 1  0 436700 1283120   5060 235100    0    0    20     0  671  676 10 11 78  1  0
 2  0 459260  83944    244 119244    0 22560   440 22640 2849 1978  6 22 69  2  0
 0  0 459260 2765184    772 146228    0    0 53040     0 1731 1836  1  8 89  2  0
 1  0 459260 2744344    772 166712    0    0 20836     0 1678 2554  3  3 92  3  0
 1  0 459256 2742988   1452 167724    0    0  1256     0 1519 2662  3  1 94  2  0
 0  0 459256 2740508   1452 170164    0    0  2440     0 1803 2972  6  1 91  2  0

Question 4:

	* On avrage I got the performance number from mem to avrage around 11 000 MB/s. So ill need to find a mem value that makes that value to avrage around 6 000 MB/s. and the method we use to calculate that is we use all of the availble free ram and then half of the free Swap value which gives me a value of (2,3Gi + 448Mi ~ 2525). We also see in the vmstat that the si is beeing used and makes more free space to ram.
	
Output from mem console:
./mem 2525
allocating 2647654400 bytes (2525.00 MB)
  number of integers in array: 661913600
loop 0 in 1344.52 ms (bandwidth: 1877.99 MB/s)
loop 5 in 482.22 ms (bandwidth: 5236.15 MB/s)
loop 10 in 488.27 ms (bandwidth: 5171.34 MB/s)
loop 15 in 502.35 ms (bandwidth: 5026.37 MB/s)
loop 20 in 508.33 ms (bandwidth: 4967.27 MB/s)
loop 25 in 467.63 ms (bandwidth: 5399.61 MB/s)
loop 30 in 407.27 ms (bandwidth: 6199.74 MB/s)
loop 35 in 406.04 ms (bandwidth: 6218.57 MB/s)

Output from vmstat console:
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0 118200 3002364  27408 348860    2   34   244    42  156  165 19  1 80  0  0
 0  0 118200 3002116  27416 348852   16    0    16    24  468  752  1  0 98  1  0
 0  0 118200 3002024  27416 348876    4    0     4     0 1903 2876 15  2 83  0  0
 0  0 118200 3001992  27416 348876    0    0     0     0  260  361  0  0 100  0  0
 0  0 118200 3001992  27416 348876    0    0     0     0  526  836  1  0 99  0  0
 0  0 280456 3238492  12048 281284    4    0     4     0  270  470  1  1 98  0  0
 1  0 280456 3238492  12048 281284    0    0     0     0  356  532  3  0 97  0  0
 0  0 280456 3238492  12048 281284    0    0     0     0  394  675  1  1 98  0  0
 0  0 280456 3238492  12048 281284    0    0     0     0  303  465  3  0 97  0  0
 1  0 280456 3238368  12048 281284    0    0     0     0  420  707  3  0 97  0  0
 1  0 280456 1670104  12048 281284    0    0     0     0  613  628 11 13 76  0  0
 1  0 366048 135868   5028 199784    0 85820   852 85820 1696 1767 13 18 67  1  0
 1  0 366048 136348   5028 199792    0    0   140     0  471  339 27  0 73  0  0
 1  0 366048 136224   5252 199716    0    0   224     0  482  368 27  0 73  1  0
 1  0 366048 136224   5252 199792    0    0     0     0  560  537 26  0 74  0  0
 1  0 366048 136108   5380 199664    0    0   128     0  457  314 26  0 73  1  0
 1  0 366048 135604   5756 199792    0    0   368    24  649  616 27  1 71  2  0
 1  0 366048 135612   5756 199792    0    0     0     0  482  373 27  0 73  0  0
 2  0 366048 135604   5756 199792    0    0     0     0  846 1022 26  1 73  0  0
 1  0 366048 135612   5756 199792    0    0     0     0  895 1154 28  1 72  0  0
 1  0 366048 135604   5756 199792    0    0     0     0  769  919 28  0 72  0  0

Question 5:

	* Memory allocation seem to fail when we input a value larger than the total mem (3,8Gi) and total swap (448Mi) combined. Which my system fails approx. whith the value of 4400.

Output free -h:
              total        used        free      shared  buff/cache   available
Mem:          3,8Gi       712Mi       2,6Gi        58Mi       540Mi       2,9Gi
Swap:         448Mi       322Mi       125Mi

Output of mem:
./mem 4400
allocating 4613734400 bytes (4400.00 MB)
memory allocation failed
